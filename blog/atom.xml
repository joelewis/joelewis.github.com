<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Archive Of Hacks]]></title>
  <link href="http://techster.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://techster.herokuapp.com/"/>
  <updated>2015-11-08T21:06:48+05:30</updated>
  <id>http://techster.herokuapp.com/</id>
  <author>
    <name><![CDATA[Joe Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Driving]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/11/08/driving/"/>
    <updated>2015-11-08T21:00:27+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/11/08/driving</id>
    <content type="html"><![CDATA[<p>Not very long ago, I&rsquo;ve bought a motorbike for myself. On an average there&rsquo;s atleast three to four moments of, let&rsquo;s just call them &ldquo;WTF Just Happened Moments&rdquo;, in a 30 km drive.</p>

<p>There&rsquo;s a likeliness of atleast 1% of those WTF moments to turn out to be fatal. If I keep driving 60 kms back and forth to office everyday, my math says I wouldn&rsquo;t last 30 days.</p>

<p>Is there anyway I can last more than 30 days and still drive everyday? Well, for one I can drive less kms per day, which could mean shift my workplace or my home. Cross. I can try confining my drives to safer road. Roads that doesn&rsquo;t home much of angry truck drivers and insane bus drivers who just burst their way out of traffic; who&rsquo;d sell their soul to devil than press feet against the break pedal. Again meaning shift my workplace to somewhere within city limits. Not an option I could try right now. Cross.</p>

<p>Looks like there&rsquo;s no much things I could do about this. I&rsquo;ll have to either bet my math or just don&rsquo;t drive that much. I&rsquo;m better off with the second one. Check. Just don&rsquo;t drive for long on unsafe roads, frequently. Let&rsquo;s see if that keeps me from dying :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Most Important Question]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/09/18/the-most-important-question/"/>
    <updated>2015-09-18T23:42:37+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/09/18/the-most-important-question</id>
    <content type="html"><![CDATA[<p><strong>What&rsquo;s the best thing you could utilise your life for?</strong></p>

<p>Now this is a rather important question. It&rsquo;s not that as if I came here for a reason and stuff, like in the movies. But there definitely is a responsibility for us to make this universe dynamics, play better by putting ourselves to use.</p>

<p>If what I&rsquo;ve said isn&rsquo;t clear enough, it&rsquo;s as simple as this &mdash; we as human beings have a moral responsibility to make this universe a better place by putting our best talent to do what&rsquo;s best to do.</p>

<p>It&rsquo;s not very often that I reflect my current stand with this. But when I do I get a solid clarity on what to do next and especially what not to do.</p>

<p>Now what am I good at is itself a complicated, unstable and a tricky question. Unstable because it&rsquo;s a function of time, and might evolve overtime. But evolving has an interesting property of convergence. The convergence to, is what we&rsquo;ve got to keep an eye on.</p>

<p>Mostly it takes atleast your early twenties and sometimes late teens to find out really what we are good at. It does take that much time to figure it out. I&rsquo;ll tell you why. I strongly believe in the famous philosophy of practice makes it perfect. If you want to be good at something you got to do it for a sufficiently long enough period of time and do it hardcore. Now you can only do that for so long only if you have your heart in it. This is where <em>tricky</em> comes in. You could be doing something repeatedly out of situational compulsion and even good at it, but without any interest to keep doing it for ten more years. So it all boils down to picking the right one as your strength based on what you&rsquo;ve done and what you have your soul on.</p>

<p>When you get that straight, the big question is to put it to right use. There&rsquo;s no really a periodic table to figure this out. In somecases it&rsquo;s obvious. Incase I&rsquo;m good at astronomy and things out there in space, the best thing for me to do would be finding out what&rsquo;s out there and letting the knowledge available freely. That would itself bring immensely good consequences. In some cases it isn&rsquo;t that obvious. Say, I&rsquo;m a cricketer. Do I play a role in making the universe a better place. At first thought it doesn&rsquo;t look like so. But if I do what I do best and keep entertaining people, god knows what people came together because of it and what friendships sprung up out of it. There are consequences and a lot of goodness in them, except they are what I call second level consequences, not direct.</p>

<p>Let&rsquo;s say you&rsquo;ve got talent that could have direct consequences, how do you decide what&rsquo;s best to do at any point of time? There&rsquo;s a trick for that.
Get out of reality and picture a world that&rsquo;s far from future. What do you see happening? What part of that world can you help make reality? There, you got your answer.</p>

<p>Maybe what you already are doing with your life complements what you just thought you should be doing. In most cases it doesn&rsquo;t. That&rsquo;s when you got to align and straighten up your actions and motives. Believe me, it works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer: From Good to Great]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/08/11/developer-from-good-to-great/"/>
    <updated>2015-08-11T02:35:34+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/08/11/developer-from-good-to-great</id>
    <content type="html"><![CDATA[<p>Like any art, programming has its stages &ndash; Amateurs, Average and Experts. Time and again, I&rsquo;ve hit on the question &mdash; how to get from good to great? This likely is the most important question a programmer should ask himself. Atleast, at some point of their career.</p>

<p>To end up with a satisfying answer, let&rsquo;s first put down what &lsquo;expertise&rsquo; actually mean. Particularly, in software engineering.</p>

<ul>
<li>An expert sees an obvious, easy solution to difficult problems.</li>
<li>When the answer isn&rsquo;t obvious, he knows where to find them &amp; how to.</li>
<li>He understands things at a deeper level. Deep enough, that he might explain them at every level of abstraction below. It doesn&rsquo;t have to be too many layers deep till the pulp of the onion. Just that, the more deeper the layers, the more good.</li>
<li>His solutions are concrete, easy to maintain and to re-apply.</li>
<li>He can tell what&rsquo;s wrong with other not-so-good solutions, supported by facts &amp; not by opinions.</li>
<li>His code is often cleverly expressive.</li>
</ul>


<p>The list may go down still, but as you can see being an expert isn&rsquo;t sorcery. It&rsquo;s something that you might eventually become, just by doing what you do repeatedly.</p>

<p>What are the odds, that you don&rsquo;t get better by doing something again and again? Is it possible to be consistently practicing, yet manage to remain a noob?</p>

<p>Yes.</p>

<p>It happens when you are skeptical about going out of your way. It happens when you stop looking for better solutions. It happens when you don&rsquo;t realize that there are infact better solutions. It happens when you compromise easy with best. It happens when you lack knowledge. It happens when you lack knowledge that you lack knowledge.</p>

<p>I don&rsquo;t yet have a design pattern to get out of good and jump to great. What I do have is some directions which might take you somewhere, if not nowhere.</p>

<ul>
<li>Code everyday. Ship some damn thing that works.</li>
<li>Do. Not. Code. In. Isolation. A lone Wolf will never know it indeed is a Wolf and not a Lion. The Internet and the people in it are your friends.</li>
<li>Read. Keep scanning things that change your perspective. Get your priority straight though. If you keep reading for days together without actually doing anything productive/meaningful/complimentary to what you&rsquo;ve read &mdash; stop.</li>
<li>Internet and the awesome people in it is enough. If you happen to find someone physically available nearby, who&rsquo;s good enough to be a mentor, it&rsquo;s 10x better. Even so, Internet is the best for introverts.</li>
</ul>


<p>Just keeping upto these naive, but important ways should keep you on track. Like all other pieces of advice, they&rsquo;re all easier said than done. I&rsquo;ll try to keep up with atleast some of them, if not all. If you&rsquo;ve got anything to add, to get from good to great &ndash; shoot up your email client and <a href="mailto:joelewis@zohocorp.com">write to me</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Future of Internet Is]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/08/04/the-future-of-internet-is/"/>
    <updated>2015-08-04T00:05:00+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/08/04/the-future-of-internet-is</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always worried about the centralization of the Internet. Infact, <a href="https://medium.com/@vettijoe/give-the-internet-fucking-back-219e87666d38">my first post on medium</a> was a rant about this.</p>

<p>Today I&rsquo;ve found someone who has <a href="https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426">articulated it perfectly, brilliantly and beautifully</a>. I can&rsquo;t agree more. He writes about how hyperlinks are loosing their power, so-called Streams are ruining reality. He also worries about how the formerly text dominant internet is moving towards a worse end.
A brilliant piece of writing from a blogger who was cut off from the internet some 7 years back, and suddenly came back to find the present version of it. Must read <a href="https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426">https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on My First Hackathon]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/05/18/notes-on-my-first-hackathon/"/>
    <updated>2015-05-18T01:05:06+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/05/18/notes-on-my-first-hackathon</id>
    <content type="html"><![CDATA[<p>I used to be a little skeptical about attending hackathons. Mostly because I don’t want to be coding to impress a panel of judges. It just doesn’t work that way. I still had a reason to knock the doors at <a href="http://savethehacker.com">Save The Hacker</a>.</p>

<p>I wanted to get out of my comfort zone and meet new people. Also, I wanted to get started on an idea I had been long procrastinating on. Attending it paid off. It was fun and I actually got shit done. Here are a few things I learnt:</p>

<ul>
<li>Wearing on your headset and just coding is nice. Taking a walk around and starting conversations with random new coders is nicer.</li>
<li>People don’t want to listen to your Idea. They want to know how they could use it for themselves. Give them that straight away and explaining gets easier.</li>
<li>Hackathons are for hacks. Your hack need not do ten things cool. It just needs to do one thing correctly.</li>
<li>People don’t want to watch you as you type text. To give a better demonstration capture a video run-through of your app. They will ask to play with your app if they liked the quick screen records.</li>
<li>People who ask you to explain your project partly do it for getting to know your project. The rest is just to start a casual conversation to know more about you. So don’t stop it there.</li>
<li>While demonstrating don’t start with stories. Put out the problem and say you’ve solved it. You don’t even have to explain them how. Just get to your app run-through as soon as you could.</li>
<li>Do not code the entire 24/48 hours. Winning is just a tiny bit of hackathons. Walk. Converse. Sleep.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Medium Debut]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/04/07/medium-debut/"/>
    <updated>2015-04-07T22:48:38+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/04/07/medium-debut</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not really sorry, that my first most medium post had to be a rant :&ndash;)
Here&rsquo;s it &ndash; <a href="https://medium.com/@vettijoe/give-the-internet-fucking-back-219e87666d38">Give The Internet Fucking Back</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Most Hackers Aren't Popular]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/03/11/why-most-hackers-arent-popular/"/>
    <updated>2015-03-11T23:24:05+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/03/11/why-most-hackers-arent-popular</id>
    <content type="html"><![CDATA[<h3>Mattering Matters</h3>

<p>Yes, smart people want to be popular. Also, yes they don&rsquo;t push enough to be popular than to be smart. <a href="http://www.paulgraham.com/nerds.html">PG puts this beautifully in his essay</a>. That&rsquo;s probably why most smart kids who grow up thinking that they&rsquo;re gonna be popular someday, don&rsquo;t.</p>

<p>The key is not to be popular, but to <em>matter</em>. You might like coding. Coding, and bringing something out of nothing is in itself takes a lot of smartness in multiple levels. But, <em>bringing something out of nothing</em> &ndash; is nothing if whatever you brought doesn&rsquo;t matter. That is the problem.</p>

<p>Most smart people, (or hackers) don&rsquo;t care what they bring out. They like hacking. They like breaking things and understanding stuff. They are curious and they like to be curious. What they don&rsquo;t care about is &ndash; the usefullness of their curiousity. That&rsquo;s where the difference rests. Hackers who create things that matter to a plumpy amount of population, become popular. The rest, even though being smart don&rsquo;t care about what matters and what not, thus retaining from popularity.</p>

<p>I don&rsquo;t think this is bad in anyway. Just don&rsquo;t ignore smart people even if they don&rsquo;t be as popular as you anticipate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Guy.]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/03/02/this-guy/"/>
    <updated>2015-03-02T12:28:06+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/03/02/this-guy</id>
    <content type="html"><![CDATA[<p>This guy&rsquo;s github streak &ndash; <a href="https://github.com/jeresig">https://github.com/jeresig</a>. Incredible.
He has even put up a blog post, about writing code everyday. Nails reality in every sentence. Surely, <a href="http://ejohn.org/blog/write-code-every-day/">a must read</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scratch]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/02/22/scratch/"/>
    <updated>2015-02-22T01:48:51+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/02/22/scratch</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/joelewis/scratch">Scratch</a> would be a minimalistic platform for selling groceries online. I&rsquo;ve chosen <a href="https://nodejs.org">node</a> with <a href="http://expressjs.com">express</a> on top of it. Normally for building an MVP, I&rsquo;d stick with <a href="http://djangoproject.org">Django</a> especially for its awesome Django-admin interface. I don&rsquo;t have any specific reason for this unusual choice other than to exploit the asynchronous request handling burnt into nodejs.</p>

<p>For the initial version, I&rsquo;m going to use <a href="http://mongodb.com">mongodb</a> as the datastore engine. I&rsquo;m not good at nonrel mongo-like queries. I&rsquo;m not a big fan of it either. Using <a href="http://mongoosejs.com">mongoose</a> should be good. It&rsquo;s an object mapper for mongodb. Why not relational? I&rsquo;m tired of migration issues. Also, the data model&rsquo;s gonna evolve rapidly and I&rsquo;m pretty sure <em>foreign keys</em> are not gonna suffice. I might be wrong. Secretly, I love columns which can contain dictionary and lists. No matter how much people rant about mongodb, I&rsquo;m going to love it for this or any non-rel databases for that matter.</p>

<p>I don&rsquo;t think I&rsquo;ll ever use server side rendering. I&rsquo;ll go with data-only-transmission principles. The entire site would be running on top of an (Almost, RESTful) API.</p>

<p>Have no clarity on the client side. For now, I might stick with Angular. It&rsquo;s bad but it gets the job done. It&rsquo;s going to take a while before starting work on the client. I&rsquo;m batting an eye on Backbone, too.</p>

<p>That is it, for now. Off to code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log 16, Feb 2014]]></title>
    <link href="http://techster.herokuapp.com/blog/2015/02/16/log-16/"/>
    <updated>2015-02-16T23:11:05+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2015/02/16/log-16</id>
    <content type="html"><![CDATA[<p>I’m up. Shamelessly it’s been three to four months since I did anything interesting. My curiosity seems to be burning out from time to time. Work’s starting to shed its skin and show it’s real self. NOT SO GREAT.</p>

<p>&lt;rant&gt;</p>

<p>Let’s see what happens when we want to bring X out of nothing.</p>

<p>We get a few more crazies and get X to v1.0 from zero. Now X happens. It starts to provide enough value to start generating revenue and means to sustain itself. X spins out Y, Z, A, B and C. Few turns into Lot. Crazies turns into teams. Now, the few who started them still want to retain control, efficiency &amp; growth. So as they expand, the Few wants things to be measured. Measurement is absolutely important for further analysis and giving the ship a destination.</p>

<p>We can never really justify the growth or decline of an entity without measurements. I know why Gates stress so much about measuring. It’s more important than whatever you know is important. The teams now need people who could do exactly that. measure-analyse-direct. They are called managers.</p>

<p>Up until now, everything seems to make sense. Managers make sense. What doesn’t make sense is how they measure things. Measuring a team, its performance, or an individual’s contribution, no matter what &ndash; I don’t find much sanity in the ways measurement is done.</p>

<p>People who really care about measuring should never really delegate the measuring job to others and save the job of summing them up for themselves. The more delegation happens and the more depth the delegations split up into &ndash; so much doomed will be the results. These empty headed patterns that had seeped into India based IT services companies is gonna cost them more than they anticipate. They have the crappiest talent management system. I will rather starve than work for one of those.</p>

<p>Things got to change. We need to find smarter units of measurement and smarter tools of measurement. I think very few companies ever do it right. Delegation is not a tool. It’s the perfect way to get imperfect results. No matter how deep you analyse based on wrong measurements, it’s useless.</p>

<p>Big problem, but not without a solution.</p>

<p>&lt;/rant&gt;</p>

<p>I’ve bought a raspberry pie. I was actually enthusiastic about writing ARM assembly. I still am. Will have to find slots of time.</p>

<p>Apparently, nothing much is going on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C Code for Barebones Kernel Tutorial @ OsDev.org - Explained]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/12/08/c-code-for-barebones-kernel-tutorial-at-osdev-dot-org-explained/"/>
    <updated>2014-12-08T21:15:35+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/12/08/c-code-for-barebones-kernel-tutorial-at-osdev-dot-org-explained</id>
    <content type="html"><![CDATA[<p>Understanding the barebone C kernel, presented at <a href="http://wiki.osdev.org/Bare_Bones">http://wiki.osdev.org/Bare_Bones</a> was not easy for me. It took a lot of gazing down the screen and WTFs. But finally, it made perfect sense. I&rsquo;ll write down whatever I wish I&rsquo;d known before landing up there.</p>

<p>There are types in C that you don&rsquo;t normally see in a fibonacci program or a demo bank application program. There is a type called <code>size_t</code>, that takes just enough bytes for holding size related values. Comes in very handy when counting or measuring things.</p>

<p>There are variation of int types like <code>uint8_t</code> and <code>uint16_t</code>, declared in <code>&lt;stdint.h&gt;</code>. Like the name suggests they occupy exactly 8 bits(1 byte) and 16 bits(2 bytes) respectively each. So you&rsquo;ve got just the datatypes, that you need to perform bit level operations.</p>

<p>For example, the VGA text mode buffer takes 2 bytes to print a given character on the terminal.
2 bytes ==> 8 + 8 bits ==> 0000 0000 0000 0000</p>

<p>The first 8 bits denote the 8bit ASCII code of the actual char to be printed. The following 8bits define the color attribute of the char. The grammer for those trailing 8 bits is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     0000              0010                 // 0000 =&gt; 0 denotes black color
</span><span class='line'>      |                 |                   // 0010 =&gt; 2 denotes green color
</span><span class='line'>   background         foreground
</span><span class='line'>     color              color
</span></code></pre></td></tr></table></div></figure>


<p>The char code for &lsquo;h&rsquo; is 104 ==> 01101000</p>

<p>Now, to print &lsquo;h&rsquo; on the screen with black as background and green as font color(foreground), you need a total of 2 bytes represented as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>01101000 0000 0010
</span><span class='line'>   |       |    |
</span><span class='line'>  char    bg    fg</span></code></pre></td></tr></table></div></figure>


<p>Cool, now all that&rsquo;s left is to assign it to a variable of some type that takes exactly 16 bits. Yes, <code>uint16_t</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 0110100000000010 ==&gt; 0x6802(hex)
</span><span class='line'>uint16_t character_h_in_green = 0x6802;</span></code></pre></td></tr></table></div></figure>


<p>Writing the variable to the physical address 0xB8000, will print the letter on screen &ndash; at row 0 &amp; column 0.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uint16_t character_h_in_green = 0x6802;
</span><span class='line'>uint16_t* vga_buffer = ( uint16_t* ) 0xB8000;
</span><span class='line'>vga_buffer[0] = character_h_in_green;</span></code></pre></td></tr></table></div></figure>


<p>Your kernel&rsquo;s main function can have only those three lines, and it would print &lsquo;h&rsquo; on the screen.</p>

<p>The VGA memory buffer looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>B8000 B8002 B8004 B8006 - - - - - - - - - - - - - - B80A0 | 80 columns
</span><span class='line'>B80A2 B80A4 B80A6 - - - - - - - - - - - - - - - - - - -   |
</span><span class='line'>  -
</span><span class='line'>  -
</span><span class='line'>------
</span><span class='line'>25 rows
</span></code></pre></td></tr></table></div></figure>


<p>The frame gives a view of which address to write the next character to.</p>

<p>As you can see, all it takes is a bit of math and a math of bits to code a simple driver that puts characters onto the terminal. That&rsquo;s what the C code given there is about.</p>

<p>For a glimpse &ndash; below is the actual code for the <em>Hello World</em> kernel from OsDev&rsquo;s barebones tutorial.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#if !defined(__cplusplus)
</span><span class='line'>#include &lt;stdbool.h&gt; /* C doesn't have booleans by default. */
</span><span class='line'>#endif
</span><span class='line'>#include &lt;stddef.h&gt;
</span><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>
</span><span class='line'>/* Check if the compiler thinks if we are targeting the wrong operating system. */
</span><span class='line'>#if defined(__linux__)
</span><span class='line'>#error "You are not using a cross-compiler, you will most certainly run into trouble"
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>/* This tutorial will only work for the 32-bit ix86 targets. */
</span><span class='line'>#if !defined(__i386__)
</span><span class='line'>#error "This tutorial needs to be compiled with a ix86-elf compiler"
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>/* Hardware text mode color constants. */
</span><span class='line'>enum vga_color
</span><span class='line'>{
</span><span class='line'>  COLOR_BLACK = 0,
</span><span class='line'>  COLOR_BLUE = 1,
</span><span class='line'>  COLOR_GREEN = 2,
</span><span class='line'>  COLOR_CYAN = 3,
</span><span class='line'>  COLOR_RED = 4,
</span><span class='line'>  COLOR_MAGENTA = 5,
</span><span class='line'>  COLOR_BROWN = 6,
</span><span class='line'>  COLOR_LIGHT_GREY = 7,
</span><span class='line'>  COLOR_DARK_GREY = 8,
</span><span class='line'>  COLOR_LIGHT_BLUE = 9,
</span><span class='line'>  COLOR_LIGHT_GREEN = 10,
</span><span class='line'>  COLOR_LIGHT_CYAN = 11,
</span><span class='line'>  COLOR_LIGHT_RED = 12,
</span><span class='line'>  COLOR_LIGHT_MAGENTA = 13,
</span><span class='line'>  COLOR_LIGHT_BROWN = 14,
</span><span class='line'>  COLOR_WHITE = 15,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>uint8_t make_color(enum vga_color fg, enum vga_color bg)
</span><span class='line'>{
</span><span class='line'>  return fg | bg &lt;&lt; 4;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>uint16_t make_vgaentry(char c, uint8_t color)
</span><span class='line'>{
</span><span class='line'>  uint16_t c16 = c;
</span><span class='line'>  uint16_t color16 = color;
</span><span class='line'>  return c16 | color16 &lt;&lt; 8;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>size_t strlen(const char* str)
</span><span class='line'>{
</span><span class='line'>  size_t ret = 0;
</span><span class='line'>  while ( str[ret] != 0 )
</span><span class='line'>  ret++;
</span><span class='line'>  return ret;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static const size_t VGA_WIDTH = 80;
</span><span class='line'>static const size_t VGA_HEIGHT = 25;
</span><span class='line'>
</span><span class='line'>size_t terminal_row;
</span><span class='line'>size_t terminal_column;
</span><span class='line'>uint8_t terminal_color;
</span><span class='line'>uint16_t* terminal_buffer;
</span><span class='line'>
</span><span class='line'>void terminal_initialize()
</span><span class='line'>{
</span><span class='line'>  terminal_row = 0;
</span><span class='line'>  terminal_column = 0;
</span><span class='line'>  terminal_color = make_color(COLOR_LIGHT_GREY, COLOR_BLACK);
</span><span class='line'>  terminal_buffer = (uint16_t*) 0xB8000;
</span><span class='line'>  for ( size_t y = 0; y &lt; VGA_HEIGHT; y++ )
</span><span class='line'>  {
</span><span class='line'>    for ( size_t x = 0; x &lt; VGA_WIDTH; x++ )
</span><span class='line'>    {
</span><span class='line'>      const size_t index = y * VGA_WIDTH + x;
</span><span class='line'>      terminal_buffer[index] = make_vgaentry(' ', terminal_color);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void terminal_setcolor(uint8_t color)
</span><span class='line'>{
</span><span class='line'>  terminal_color = color;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void terminal_putentryat(char c, uint8_t color, size_t x, size_t y)
</span><span class='line'>{
</span><span class='line'>  const size_t index = y * VGA_WIDTH + x;
</span><span class='line'>  terminal_buffer[index] = make_vgaentry(c, color);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void terminal_putchar(char c)
</span><span class='line'>{
</span><span class='line'>  terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
</span><span class='line'>  if ( ++terminal_column == VGA_WIDTH )
</span><span class='line'>  {
</span><span class='line'>    terminal_column = 0;
</span><span class='line'>    if ( ++terminal_row == VGA_HEIGHT )
</span><span class='line'>    {
</span><span class='line'>      terminal_row = 0;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void terminal_writestring(const char* data)
</span><span class='line'>{
</span><span class='line'>  size_t datalen = strlen(data);
</span><span class='line'>  for ( size_t i = 0; i &lt; datalen; i++ )
</span><span class='line'>  terminal_putchar(data[i]);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#if defined(__cplusplus)
</span><span class='line'>extern "C" /* Use C linkage for kernel_main. */
</span><span class='line'>#endif
</span><span class='line'>void kernel_main()
</span><span class='line'>{
</span><span class='line'>  terminal_initialize();
</span><span class='line'>  /* Since there is no support for newlines in terminal_putchar yet, \n will
</span><span class='line'>  produce some VGA specific character instead. This is normal. */
</span><span class='line'>  terminal_writestring("Hello, kernel World!\n");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve written a version of the same kernel, that gets rid of <em>weird</em> C types and uses <code>char</code> for pretty much everything. Here it is &ndash;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stddef.h&gt;
</span><span class='line'>#include &lt;stdint.h&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#if defined(__linux__)
</span><span class='line'>#error "You are not using a cross compiler. Good luck with your attempt!"
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>#if !defined(__i386)
</span><span class='line'>#error "This program needs to be compiled with a ix86-elf compiler"
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// helper func
</span><span class='line'>size_t strlen(const char* str) {
</span><span class='line'>  size_t ret = 0;
</span><span class='line'>  while ( str[ret] != 0 )
</span><span class='line'>  ret++;
</span><span class='line'>  return ret;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static const size_t VGA_WIDTH = 80; // 80 chars long
</span><span class='line'>static const size_t VGA_HEIGHT = 25; // 25 chars tall
</span><span class='line'>
</span><span class='line'>unsigned int terminal_x;
</span><span class='line'>unsigned int terminal_y;
</span><span class='line'>char* vga_buffer;
</span><span class='line'>
</span><span class='line'>void terminal_init() {
</span><span class='line'>  terminal_x = 0;
</span><span class='line'>  terminal_y = 0;
</span><span class='line'>  unsigned int index = 0;
</span><span class='line'>  // terminal_color = make_color(COLOR_LIGHT_GREY, COLOR_BLACK);
</span><span class='line'>  vga_buffer = (char*) 0xB8000;
</span><span class='line'>  while ( index &lt; VGA_WIDTH * VGA_HEIGHT * 2 ) {
</span><span class='line'>    vga_buffer[index] = ' ';
</span><span class='line'>    vga_buffer[index+1] = 0x17;
</span><span class='line'>    index+=2;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void terminal_putchar(char c) {
</span><span class='line'>  unsigned int index = terminal_y * VGA_WIDTH + terminal_x; // get current index
</span><span class='line'>  vga_buffer[index] = c;
</span><span class='line'>  vga_buffer[index+1] = 0x17;
</span><span class='line'>  // increment terminal_x && terminal_y to point to new position to put the next char
</span><span class='line'>  terminal_x+=2;
</span><span class='line'>  if ( terminal_x == VGA_WIDTH*2 ) {
</span><span class='line'>    terminal_x = 0;
</span><span class='line'>    terminal_y+=2;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void terminal_writestr(char* data) {
</span><span class='line'>  for ( size_t i=0; i&lt;strlen(data); i++ ) {
</span><span class='line'>    terminal_putchar(data[i]);
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void kernel_main() {
</span><span class='line'>  terminal_init();
</span><span class='line'>  terminal_writestr("Hello, joe!");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is what I got &ndash;
<img src="http://techster.herokuapp.com/images/os1.png" alt="Grub" />
<img src="http://techster.herokuapp.com/images/os2.png" alt="Grub" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Qemu With Brew]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/12/08/installing-qemu-with-brew/"/>
    <updated>2014-12-08T00:20:46+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/12/08/installing-qemu-with-brew</id>
    <content type="html"><![CDATA[<p>Installing Qemu with system shipped <em>brew</em> works well. What doesn&rsquo;t work is using the binary.
Running <code>qemu-system-i386</code> on my terminal crashed with this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dyld: Library not loaded: /usr/local/lib/libgthread-2.0.0.dylib
</span><span class='line'>Referenced from: /usr/local/bin/qemu-system-i386
</span><span class='line'>Reason: image not found
</span><span class='line'>Trace/BPT trap: 5</span></code></pre></td></tr></table></div></figure>


<p>Doesn&rsquo;t seem like a commmon problem since google doesn&rsquo;t show any trace. With a bounded knowledge on how stuff work on mac, here&rsquo;s a fix that worked for me.</p>

<p>To find where is it looking for the missing <em>.dylib</em> files, run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>otool -L `which qemu-system-i386`</span></code></pre></td></tr></table></div></figure>


<p>This is what I got in my machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/bin/qemu-system-i386:
</span><span class='line'>  /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 855.17.0)
</span><span class='line'>  /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)
</span><span class='line'>  /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)
</span><span class='line'>  /usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current version 8.0.0)
</span><span class='line'>  /usr/local/lib/libgthread-2.0.0.dylib (compatibility version 4201.0.0, current version 4201.0.0)
</span><span class='line'>  /usr/local/lib/libglib-2.0.0.dylib (compatibility version 4201.0.0, current version 4201.0.0)
</span><span class='line'>  /usr/local/opt/gettext/lib/libintl.8.dylib (compatibility version 10.0.0, current version 10.2.0)
</span><span class='line'>  /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)
</span><span class='line'>  /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio (compatibility version 1.0.0, current version 1.0.0)
</span><span class='line'>  /usr/local/lib/libjpeg.8.dylib (compatibility version 13.0.0, current version 13.0.0)
</span><span class='line'>  /usr/lib/libsasl2.2.dylib (compatibility version 3.0.0, current version 3.15.0)
</span><span class='line'>  /usr/local/lib/libgnutls.28.dylib (compatibility version 59.0.0, current version 59.8.0)
</span><span class='line'>  /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa (compatibility version 1.0.0, current version 20.0.0)
</span><span class='line'>  /usr/local/lib/libpixman-1.0.dylib (compatibility version 33.0.0, current version 33.6.0)
</span><span class='line'>  /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.0.0)
</span><span class='line'>  /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1)
</span><span class='line'>  /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 1265.21.0)
</span><span class='line'>  /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices (compatibility version 1.0.0, current version 48.0.0)
</span><span class='line'>  /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics (compatibility version 64.0.0, current version 600.0.0)
</span><span class='line'>  /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1056.16.0)
</span><span class='line'>  /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)</span></code></pre></td></tr></table></div></figure>


<p>Now just locating the missing <em>.dylib</em> files and copying it into the directories it is being looked for, fixed the problem.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ locate libgthread-2.0
</span><span class='line'>/usr/local/Cellar/glib/2.42.0/lib/libgthread-2.0.0.dylib
</span><span class='line'>/usr/local/Cellar/glib/2.42.0/lib/libgthread-2.0.dylib
</span><span class='line'>$ cp /usr/local/Cellar/glib/2.42.0/lib/libgthread-2.0.0.dylib /usr/local/lib/</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Repeat this for any other missing <em>dylib</em>s and you&rsquo;re done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JustLog: Oct-Nov 2014]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/11/16/introducing-a-little-more-entropy/"/>
    <updated>2014-11-16T23:41:53+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/11/16/introducing-a-little-more-entropy</id>
    <content type="html"><![CDATA[<p>Working at a big corporation has its own kind of perks. No, I&rsquo;m not talking about free food and stuff. I&rsquo;m getting more of what I missed in the first 18 months after graduation &ndash; Time. However, I find it hard to delegate priorities and consequently have a feeling that I&rsquo;m not exploiting the one perk for which I quit working at a startup.</p>

<p>I still somehow have an instinct, that things will improve over time. To keep negativity at its lowest, I&rsquo;m leaving my workplace late, and using the air gap after work to read/do/gym. Still, using the workplace for something other than bringing value to the organization is not something I&rsquo;m comfortable with. I&rsquo;ve got no choice untill I get my Internet connection in my place to get its act together. At work, working on a huge code base, that has little framework and a lot of brilliance built into throughly random places <em>is</em> exciting!</p>

<p>I haven&rsquo;t forgot that <a href="http://vanitypro.herouapp.com">vanity</a> isn&rsquo;t complete. Will have to find some slots of time and interest to resume working on it. I&rsquo;ve also bootstrapped an interesting take on the broken world of documents. More on it later. There&rsquo;s just too much stuff that amuses me, that most of the time I just keep thinking about stuff that I&rsquo;m not able to do, thereby increasing my negativity syndrome. I&rsquo;ve scheduled a <a href="https://docs.zoho.com/sheet/ropen.do?rid=fs79pc7ed54b87f50432a88c2efb40c297ea6">time table</a>, that I don&rsquo;t think I will keep up with &ndash; to mitigate the <em>syndrome</em> :&ndash;)</p>

<p>I&rsquo;m in deep shit with friends. Normally, I don&rsquo;t care when people think they are a kind of gifted smarties. I strongly believe in what PG says. Smart people have no pressure to act smart. The rest of them are the ones who try so hard. Well, now it seems I can&rsquo;t stand such behaviour. I&rsquo;m with people who try so hard to seem smart, that more than often I have to hide my temper when conversing with them. I&rsquo;ll have to run away from these people &ndash; as far as I can, as fast as I can. I&rsquo;m sure I&rsquo;ll have to deal with this type of people, throughout my span. Will have to learn to deal with them, than losing my temper or running away.</p>

<p>So, that&rsquo;s about it. I&rsquo;m working stuff &ndash; reading stuff &ndash; enjoying things &ndash; running away from some &ndash; wasting time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public Data of Public Officials]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/10/12/public-data-of-public-officials/"/>
    <updated>2014-10-12T02:36:42+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/10/12/public-data-of-public-officials</id>
    <content type="html"><![CDATA[<p>New Delhi has opened up attendance data of government officials as  public, realtime data on <a href="http://attendance.gov.in">attendance.gov.in</a>. This level of transparency &amp; its effects is going to have an awesome impact on the nation&rsquo;s services/activities for the public.</p>

<p>Expecting more data to be liberated out of files &amp; records, lying around in racks of government offices. More publicly available data will drive a better class of softwares and applications.</p>

<p>Imagine making GPS data of all the trains running in the city, publicly available. With that, I could never think of a day when I&rsquo;ll miss a train and wait for another twenty minutes on the platform. That&rsquo;s just an example and there is so much more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevLog: 6]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/10/12/devlog-6/"/>
    <updated>2014-10-12T01:15:38+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/10/12/devlog-6</id>
    <content type="html"><![CDATA[<ul>
<li>Polished up <a href="http://vanitypro.herokuapp.com">vanity</a> a bit and deployed it on <a href="http://heroku.com">heroku</a>. Going live, even if it&rsquo;s pretty unfinished has its own sort of happiness :&ndash;)</li>
<li>I&rsquo;m reading like a monster. Yes, something that I really missed for more than a year, while I was working hardcore for my previous employer. I&rsquo;m reading totally random articles, books, anything and everything that could trigger and feed my curiosity. Hope I get enough time to keep it going. Right now on my desk are <em>Operating Systems: Design and Implementation</em> and <em>Distributed Systems</em>, both written by Tanenbaum. I&rsquo;ve also got SICP and TCPL, that I occasionaly scan on.</li>
<li>Did I mention previous employer? Yea, I had to quit. Don&rsquo;t mistake, I had an awesome year(and almost a half) with the startup&rsquo;s founder and colleague. Got to learn an awful lot, that&rsquo;d probably stay with me for the rest of my career. But, I had to stop what I was doing for reasons that I&rsquo;ll have to dissect later.</li>
<li>What next? Seems like I&rsquo;ll be getting onboard <a href="http://zoho.com">Zoho</a>. From an early stage startup to an enterprise that serves millions. It&rsquo;s going to be one hell of a ride to fit myself in. Who knows? might be fun.</li>
<li>Also, I&rsquo;m slowly getting a closer look at the system level stuff about computers. I flirted with C and found out how memory allocation happens for datatypes, for example. I&rsquo;ll be trying assembly in a short while, to understand Computer Architecture and stuff!</li>
<li>Spent a night dockerizing <a href="http://odoo.com">odoo</a>, just to find out that there&rsquo;s already one published very recently. Shit happens.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Up]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/08/10/scala-up/"/>
    <updated>2014-08-10T14:42:06+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/08/10/scala-up</id>
    <content type="html"><![CDATA[<p>The interesting stuff about scala is the way it supports object oriented way of programming, but also induces you to do it the functional way. There are languages out their alike, say python. But python never <em>induces</em> you to do things the functional way. It doesn&rsquo;t even make you bother about the way you code. Scala does.</p>

<p>You do a loop, there your consciensce caught you. You use a <code>var</code> instead of <code>val</code>, again it caught you. Even writing a function that doesn&rsquo;t return anything, pricks you in some way. So, you check whether the function mutates state or just does I/O stuff.</p>

<p>So far, I&rsquo;m impressed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[X-Frame-Options]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/08/04/x-frame-options/"/>
    <updated>2014-08-04T01:19:34+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/08/04/x-frame-options</id>
    <content type="html"><![CDATA[<p>I like the level of control we could afford for our web app, by simply setting an HTTP Header(<em>X-Frame-Options</em>).</p>

<p>If you don&rsquo;t want to make any page/data served by your app, embeddable into an iframe, you could always set <code>X-Frame-Options</code> header to <code>DENY</code>.</p>

<p>Other possible values include <code>SAMEORIGIN</code>(to allow embedding only inside your app&rsquo;s domain) and <code>ALLOWALL</code>(to allow embedding anywhere). Should be handy when configuring nginx.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Should Osdev.org Be So Initimidating?]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/08/03/why-should-osdev-dot-org-be-so-initimidating/"/>
    <updated>2014-08-03T22:02:39+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/08/03/why-should-osdev-dot-org-be-so-initimidating</id>
    <content type="html"><![CDATA[<p>So, all you want is to just get a deeper insight into your machine.
You just wanted to understand the very process of computing or how the heap of bare metals and wires and silicon chips execute the code you write.
Starting from the bootloader, to the kernel, to user space and on.</p>

<p>Somebody told you that there&rsquo;s <a href="http://wiki.osdev.org">osdev.org</a>, where god-level experts on the above stuff, hangout.
Well, you read a couple of posts there say, <a href="http://wiki.osdev.org/Beginner_Mistakes">this</a>.</p>

<p>By this time you are so sure that you are not worth it, that you get back to whatever you were doing before landing up at osdev.org.</p>

<p>Seriously, you don&rsquo;t have to be that intimidating to drive off the bunch of not-so-serious, absolute dummies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Support JsonResume Project]]></title>
    <link href="http://techster.herokuapp.com/blog/2014/07/18/i-support-jsonresume-project/"/>
    <updated>2014-07-18T00:27:23+05:30</updated>
    <id>http://techster.herokuapp.com/blog/2014/07/18/i-support-jsonresume-project</id>
    <content type="html"><![CDATA[<p>I found this awesome initiative by a bunch of guys, called (JsonResume)[<a href="http://jsonresume.org">http://jsonresume.org</a>].
Seriously, I think resumes are the most broken end of a recruiting process, atleast for programming related boarding ons.</p>

<p>I personally hate resumes. They can be warped and misleading in so many ways. People like these who try to fix the system are awesome. They are trying to bring on a standard schema for a resume. The world could be much more a better place, if resumes can be considered as structured data.</p>

<p>I&rsquo;ve gone ahead and started contributing my code.</p>

<p>Thinking of making my own fork of the schema that includes personal projects as a root section. Seems like there&rsquo;s already an (issue)[<a href="https://github.com/jsonresume/resume-schema/issues/38">https://github.com/jsonresume/resume-schema/issues/38</a>] pulled over this. I just don&rsquo;t own the patience to wait for the issue to be closed.</p>

<p>For now, I&rsquo;ll have my own fork of the schema, which is modified to support projects section, and my own version of modern-theme that utilizes the data.</p>

<p>Started by fixing up a tiny issue in (theme-manager)[<a href="http://github.com/jsonresume.theme-manager">http://github.com/jsonresume.theme-manager</a>].</p>
]]></content>
  </entry>
  
</feed>
